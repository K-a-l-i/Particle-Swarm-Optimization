#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  2 03:30:25 2021

@author: kali
"""

#Importing libraries
import numpy as np
import math
import pandas as pd
from Deb_USP import Deb_USP
from Deb_ED import Deb_ED
from Dynamic import Dynamic
from Death import Death
from Static_coef import Static_coef
from DED1 import DED1
from DED2 import DED2


from ded import ded
import statistics
import time
from operator import itemgetter

#Class Problem
class Problem():
    def __init__(self,func, lb,ub, cons=False,cons_eq=False):
        self.f = func
        self.lb = lb
        self.ub = ub
        self.cons=cons
        self.cons_eq=cons_eq
"---------------------------------------------------------------------------------------------------------------------------------------------------------"

"Objective Functions and PSO Implementations"
                  
"---------------------------------------------------------------------------------------------------------------------------------------------------------"

"G01"
"--------------------"
def g01(x):
    return 5*np.sum(x[i] for i in range(4)) - 5*np.sum(x[i]**2 for i in range(4)) -np.sum(x[i] for i in range(4,13))  


#-> f(x*) == -15
def g1_f1(x):
    r = 2*x[0]+2*x[1]+x[9]+x[10]-10
    return max(r,0)

def g2_f1(x):
    r = 2*x[0]+2*x[2]+x[9]+x[10]-10
    return max(r,0)

def g3_f1(x):
    r = 2*x[1]+2*x[2]+x[10]+x[11]-10
    return max(r,0)

def g4_f1(x):
    r = -8*x[0]+x[9]
    return max(r,0)

def g5_f1(x):
    r =-8*x[1]+x[10]
    return max(r,0)

def g6_f1(x):
    r=-8*x[2]+x[11]
    return max(r,0)

def g7_f1(x):
    r = -2*x[3]-x[4]+x[9]
    return max(r,0)

def g8_f1(x):
    r = -2*x[5]-x[6]+x[10]
    return max(r,0)

def g9_f1(x):
    r = -2*x[7]-x[8]+x[11]
    return max(r,0)

"--------------------"        
"G02" 
"--------------------" 
# -> f(x*) == -0.80361910412559
def g02(x):
    D=np.size(x)
    return - np.abs((np.sum(np.cos(x[i])**4 for i in range(D)) -2*np.prod(np.cos(x[i])**2))/np.sqrt(np.sum(i*x[i]**2 for i in range(D))))

def g1_f2(x):
    r= 0.75 -np.prod(x)
    return max(r,0)

def g2_f2(x):
    D=np.size(x)
    r= np.sum(x) -0.75*D
    return max(r,0)

"--------------------"        
"G03" 
"--------------------" 
# -> f(x*) == -1.00050010001000
def g03(x):
    D=np.size(x)
    return (-(np.sqrt(D))**D)*np.prod(x)

def h1_f3(x):
    D=np.size(x)
    r= np.sum(x[i]**2 for i in range(D)) -1
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
    
"--------------------"        
"G04" 
"--------------------" 
# -> f(x*) == -3.066553867178332e+004
def g04(x):
    return 5.3578547*x[2]**2 + 0.8356891*x[0]*x[4] + 37.293239*x[0] - 40792.141

def g1_f4(x):
    r= 85.334407 + 0.0056858*x[1]*x[4] + 0.0006262*x[0]*x[3] - 0.0022053*x[2]*x[4] - 92
    return max(r,0)

def g2_f4(x):
    r= -85.334407 - 0.0056858*x[1]*x[4] - 0.0006262*x[0]*x[3] + 0.0022053*x[2]*x[4]
    return max(r,0)

def g3_f4(x):
    r= 80.51249 + 0.0071317*x[1]*x[4] + 0.0029955*x[0]*x[1] + 0.0021813*x[2]**2 - 110
    return max(r,0)

def g4_f4(x):
    r= -80.51249 - 0.0071317*x[1]*x[4] - 0.0029955*x[0]*x[1]- 0.0021813*x[2] + 90
    return max(r,0)

def g5_f4(x):
    r= 9.300961 + 0.0047026*x[2]*x[4] + 0.0012547*x[0]*x[2] + 0.0019085*x[2]*x[3] - 25
    return max(r,0)

def g6_f4(x):
    r= -9.300961 - 0.0047026*x[2]*x[4] - 0.0012547*x[0]*x[2] - 0.0019085*x[2]*x[3] + 20
    return max(r,0)

"--------------------"        
"G05" 
"--------------------" 
# -> f(x*) == 5126.4967140071
def g05(x):
    return 3*x[0] + 0.000001*x[0]**3 + 2*x[1] + ( 0.000002/3 )*x[1]**3

def g1_f5(x):
    r= -x[3] + x[2] - 0.55
    return max(r,0)

def g2_f5(x):
    r= -x[2]+ x[3] - 0.55
    return max(r,0)

def h1_f5(x):
    r= 1000*np.sin( -x[2] - 0.25) + 1000*np.sin( -x[3] - 0.25) + 894.8 - x[0]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h2_f5(x):
    r= 1000*np.sin( x[2] -0.25) + 1000*np.sin( x[2] - x[3] - 0.25) + 894.8 - x[1]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f5(x):
    r= 1000*np.sin( x[3] - 0.25) + 1000*np.sin( x[3] - x[2] - 0.25) + 1294.8
    if np.abs(r)>1e-12:
        return r
    else:
        return 0


"--------------------"        
"G06" 
"--------------------"
# custom constraint -> f(x*) == -6961.81387558015
def g06(x):
    return (x[0]-10)**3 +(x[1]-20)**3

def g1_f6(x):
    r= -(x[0]-5)**2 - (x[1]-5)**2 +100
    return max(r,0)

def g2_f6(x):
    r= -(x[0]-6)**2 - (x[1]-5)**2 - 82.81
    return max(r,0)

"--------------------"        
"G07" 
"--------------------"
# custom constraint -> f(x*) == 24.30620906818
def g07(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] - 14*x[0] - 16*x[1] + ( x[2] - 10)**2 + 4*( x[3] - 5)**2 + ( x[4] - 3)**2 +2*( x[5] - 1)**2 + 5*x[6]**2+ 7*( x[7] - 11)**2 + 2*( x[8] - 10)**2 + ( x[9] - 7)**2 + 45

def g1_f7(x):
    r= -105 + 4*x[0] + 5*x[1] - 3*x[6] + 9*x[7]
    return max(r,0)

def g2_f7(x):
    r= 10*x[0] - 8*x[1] - 17*x[6] + 2*x[7]
    return max(r,0)

def g3_f7(x):
    r= -8*x[0] + 2*x[1] + 5*x[8] - 2*x[9] - 12
    return max(r,0)

def g4_f7(x):
    r= 3*( x[0] - 2) + 4*( x[1] - 3) + 2*x[2] - 7*x[3] - 120
    return max(r,0)

def g5_f7(x):
    r= 5*x[0]**2 + 8*x[1] + ( x[2] - 6)**2 - 2*x[3] - 40
    return max(r,0)

def g6_f7(x):
    r= x[0]**2 + 2*( x[1] - 2)**2 - 2*x[0]*x[1] + 14*x[4] - 6*x[5]
    return max(r,0)

def g7_f7(x):
    r= 0.5*( x[0] - 8)**2 + 2*( x[1] - 4)**2 + 3*x[4]**2 - x[5] - 30
    return max(r,0)

def g8_f7(x):
    r= -3*x[0] + 6*x[1] + 12*( x[8]- 8)**2 - 7*x[9]
    return max(r,0)

"--------------------"        
"G08" 
"--------------------"
# custom constraint -> f(x*) == -0.0958250414180359
def g08(x):
    return -((np.sin(2*np.pi*x[0])**3)*(np.sin(2*np.pi*x[1])))/((x[0]**3)*(x[0]+x[1]))

def g1_f8(x):
    r= -x[0]**2 - x[1] +1
    return max(r,0)

def g2_f8(x):
    r= 1 - x[0] + (x[1]-4)**2
    return max(r,0)

"--------------------"        
"G09" 
"--------------------"
# custom constraint -> f(x*) == 680.630057374402
def g09(x):
    return ( x[0] - 10)**2 + 5*( x[1] - 12)**2 + x[2]**4 + 3*( x[3] - 11)**2 + 10*x[4]**6 + 7*x[5]**2 + x[6]**4 - 4*x[5]*x[6] - 10*x[5] - 8*x[6]

def g1_f9(x):
    r= -127 + 2*x[0]**2 + 3*x[1]**4 + x[2] + 4*x[3]**2 + 5*x[4]
    return max(r,0)

def g2_f9(x):
    r= -282 + 7*x[0] + 3*x[1] + 10*x[2]**2 + x[3] - x[4]
    return max(r,0)

def g3_f9(x):
    r= -196 + 23*x[0] + x[1]**2 + 6*x[5]**2 - 8*x[6]
    return max(r,0)

def g4_f9(x):
    r= 4*x[0]**2 + x[1]**2 - 3*x[0]*x[1] + 2*x[2]**2 + 5*x[5] - 11*x[6]
    return max(r,0)

"--------------------"        
"G10" 
"--------------------"
# custom constraint -> f(x*) == 7049.24802052867
def g10(x):
    return x[0]+x[1]+x[2]

def g1_f10(x):
    r= -1 + 0.0025*( x[3] + x[5] )
    return max(r,0)

def g2_f10(x):
    r= -1 + 0.0025*( x[4] + x[6] - x[3] )
    return max(r,0)

def g3_f10(x):
    r= -1 + 0.01*( x[7] - x[4] )
    return max(r,0)

def g4_f10(x):
    r= -x[0]*x[5] + 833.33252*x[3] + 100*x[0] - 83333.333
    return max(r,0)

def g5_f10(x):
    r= -x[1]*x[6] + 1250*x[4] + x[1]*x[3] - 1250*x[3]
    return max(r,0)

def g6_f10(x):
    r= -x[2]*x[7] + 1250000 + x[2]*x[4] - 2500*x[4]
    return max(r,0)



"--------------------"        
"G11" 
"--------------------"
# custom constraint -> f(x*) == 0.7499
def g11(x):
    return x[0]**2 + (x[1]-1)**2

def h1_f11(x):
    r= x[1]-x[0]**2 - 0.7499
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
"--------------------"        
"G12" 
"--------------------"
# custom constraint -> f(x*) == -1
def g12(x):
    return -(100-(x[0]-5)**2 - (x[1]-5)**2 -(x[2]-5)**2)/100

def g1_f12(x):
    r= (x[0]-1)**2 + (x[1]-2)**2 + (x[2]-9)**2 - 0.0625
    return max(r,0)

"--------------------"        
"G13" 
"--------------------"
# custom constraint -> f(x*) == 0.053941514041898
def g13(x):
    return np.exp(np.prod(x))

def h1_f13(x):
    D=np.size(x)
    r= np.sum(x[i]**2 for i in range(D)) -10
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f13(x):
    r= x[1]*x[2] - 5*x[3]*x[4]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f13(x):
    r= x[0]**3 + x[1]**3 + 1
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
"--------------------"        
"G14" 
"--------------------"
# custom constraint -> f(x*) == -47.7648884594915
def g14(x):
    c=[-6.089,-17.164,-34.054,-5.914,-24.721,-14.986,-24.1,-10.708,-26.662,-22.179]
    r=0
    for i in range(len(x)):
        r+=np.sum(x[i:]*(c[i]+np.log(x[i]/np.sum(x))))
    return r        

def h1_f14(x):
    r= x[0] + 2*x[1] + 2*x[2] + x[5] + x[9] - 2
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f14(x):
    r= x[3] + 2*x[4] + x[5] + x[6] - 1
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f14(x):
    r= x[2]+ x[6] + x[7] + 2*x[8] + x[9] - 1
    if np.abs(r)>1e-12:
        return r
    else:
        return 0    

    
"--------------------"        
"G15" 
"--------------------"
# custom constraint -> f(x*) == 961.715022289961


def g15(x):   
    return 1000 - x[0]**2 -2*x[1]**2 - x[2]**2 - x[0]*x[1] - x[0]*x[2]


def h1_f15(x):
    r= x[0]**2 +x[1]**2 +x[2]**2 - 25
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f15(x):
    r= x[0]*8 +x[1]*14 +7*x[2] - 56
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
"--------------------"        
"G16" 
"--------------------"
# custom constraint -> f(x*) == 961.715022289961


def g16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    c14=2324*y10 - 28740000*y2
    y17= 14130000 - 1328*y10 - 531*y11 +c14/c12
    c15=(y13/y15)-y13/0.52
    c16=1.104 - 0.72*y15
    c17=y9 + x[4]
    return 0.000117*y14 + 0.1365 + 0.00002358*y13 + 0.000001502*y16 + 0.0321*y12 + 0.004324*y5  + 0.0001*c15/c16 + 37.48*y2/c12 - 0.0000005843*y17
    
    
def g1_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*( x[0] - y3 ) + ((0.1956*( x[0] - y3 )**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    return max(0.28/0.72*y5-y4,0)

def g2_f16(x):    
    return max(x[2] - 1.5*x[1],0)

def g3_f16(x): 
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*( x[0] - y3 ) + ((0.1956*( x[0] - y3 )**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    c14=2324*y10 - 28740000*y2
    y17= 14130000 - 1328*y10 - 531*y11 +c14/c12
    c15=(y13/y15)-y13/0.52
    c16=1.104 - 0.72*y15
    c17=y9 + x[4]
    return max(3496*y2/c12 - 21,0)
"--------------------"        
"G17" 

def g4_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    c14=2324*y10 - 28740000*y2
    y17= 14130000 - 1328*y10 - 531*y11 +c14/c12
    c15=(y13/y15)-y13/0.52
    c16=1.104 - 0.72*y15
    c17=y9 + x[4]
    return max(110.6+y1-62212/c17,0)

def g5_f16(x):
    y1=x[1]+x[2]+41.6
    return max(213.1-y1,0)

def g6_f16(x):
    y1=x[1]+x[2]+41.6
    return max(y1 - 405.23,0)

def g7_f16(x):
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    return max(17.505 - y2,0)

def g8_f16(x):
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    return max(y2-1053.6667,0)
    
def g9_f16(x):
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    return max(11.275 - y3,0)

def g10_f16(x):
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    return max(y3-35.03,0)

def g11_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    r=214.228-y4
    return max(r,0)

def g12_f16(x):
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    r=y4-665.585
    return max(r,0)

def g13_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    r=7.458-y5
    return max(r,0)

def g14_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    r=y5-584.463
    return max(r,0)

def g15_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    return max(0.961-y6,0)

def g16_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    r=y6-265.916
    return max(r,0)

def g17_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    r= 1.612 -y7
    return max(r,0)

def g18_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    r=y7-7.046
    return max(r,0)

def g19_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    return max(0.146-y8,0)

def g20_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    return max(y8-0.222,0)

def g21_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    return max(107.99-y9,0)

def g22_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    return max(y9-273.366,0)
    
def g23_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    return max(922.693 - y10,0)

def g24_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    return max(y10-1286.105,0)

def g25_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    return max(926.832-y11,0)

def g26_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    return max(y11-1444.046,0)

def g27_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    return max(18.766 - y12,0)

def g28_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    return max(y12 - 537.141,0)

def g29_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    return max(1072.163- y13,0)

def g30_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    return max(y13 - 3247.039,0)    

def g31_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    return max(8961.448 - y14,0)
    
def g32_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    return max(y14 - 26844.086,0)    
    
def g33_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    return max(0.063 - y15,0)
    
def g34_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13  
    return max(y15 - 0.386,0)
    
def g35_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    return max(71084.33 -y16,0)

def g36_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    return max(y16 - 140000,0)

def g37_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    c14=2324*y10 - 28740000*y2
    y17= 14130000 - 1328*y10 - 531*y11 +c14/c12
    return max(2802713 - y17,0)

def g38_f16(x):
    y1=x[1]+x[2]+41.6
    c1=0.024*x[3]-4.62
    y2=(12.5/c1)+12
    c2=0.0003535*x[0]**2 + 0.5311*x[0] + 0.08705*y2*x[0]
    c3=0.052*x[0] + 78 + 0.002377*y2*x[0]
    y3=c2/c3
    y4=19*y3
    c4=0.04782*(x[0] - y3) + ((0.1956*(x[0] - y3)**2)/x[1])+ 0.6376*y4 + 1.594*y3
    c5=100*x[1]
    c6=x[0]-y3-y4
    c7=0.950-(c4/c5)
    y5=c6*c7
    y6=x[0]-y5-y4-y3
    c8=0.995*( y5 + y4 )
    y7=c8/y1
    y8=c8/3798
    c9=y7-(0.0663*y7/y8)-0.3153
    y9=96.82/c9+0.321*y1
    y10=1.29*y5 + 1.258*y4 + 2.29*y3 + 1.71*y6
    y11=1.71*x[0] - 0.452*y4 + 0.580*y3
    c10=12.3/752.3
    c11=1.75*y2*0.995*x[0]
    c12=0.995*y10 + 1998
    y12=c10*x[0]+c11/c12
    y13=c12-1.75*y2
    y14 = 3623 + 64.4*x[1] + 58.4*x[2] +146312/(y9+x[4])
    c13=0.995*y10 + 60.8*x[1] + 48*x[3] - 0.1121*y14 - 5095
    y15=y13/c13
    y16= 148000 - 331000*y15 + 40*y13 - 61*y15*y13
    c14=2324*y10 - 28740000*y2
    y17= 14130000 - 1328*y10 - 531*y11 +c14/c12
    return max(y17 - 12146108,0)
"--------------------"
# custom constraint -> f(x*) == 8853.53

def g17(x):
    if x[0]<300:
        f1=30*x[0]
    else:
        f1=31*x[0]
    if 0<=x[1]<100:
        f2=28*x[1]
    elif 100<=x[1]<200:
        f2=29*x[1]
    else:
        f2=30*x[1]
    return f1+f2

def h1_f17(x):
    r= -x[0]+300 - (x[2]*x[3]/131.078)*np.cos(1.48477-x[5])+(0.90798*x[2]**2/131.078)*np.cos(1.47588)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f17(x):
    r= -x[1]- (x[2]*x[3]/131.078)*np.cos(1.48477+x[5])+(0.90798*x[3]**2/131.078)*np.cos(1.47588)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f17(x):
    r= -x[4] - (x[2]*x[3]/131.078)*np.sin(1.48477+x[5])+(0.90798*x[3]**2/131.078)*np.sin(1.47588)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h4_f17(x):
    r= 200 - (x[2]*x[3]/131.078)*np.sin(1.48477-x[5])+(0.90798*x[2]**2/131.078)*np.sin(1.47588)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
 
"--------------------"        
"G18" 
"--------------------"
# custom constraint -> f(x*) == − 0.866025403784439
def g18(x):
    return -0.5*( x[0]*x[3] - x[1]*x[2] + x[2]*x[8] - x[4]*x[8] + x[4]*x[7] - x[5]*x[6] )

def g1_f18(x):
    r= x[2]**2+x[3]**2 - 1
    return max(r,0)

def g2_f18(x):
    r= x[8]**2 - 1
    return max(r,0)

def g3_f18(x):
    r= x[4]**2 + x[5]**2 -1
    return max(r,0)

def g4_f18(x):
    r= x[0]**2 + (x[1] -x[8])**2 - 1
    return max(r,0)

def g5_f18(x):
    r= (x[0]-x[4])**2 + (x[1] -x[5])**2 - 1
    return max(r,0)

def g6_f18(x):
    r= (x[0]-x[6])**2 + (x[1] -x[7])**2 - 1
    return max(r,0)

def g7_f18(x):
    r= (x[2]-x[4])**2 + (x[3] -x[5])**2 - 1
    return max(r,0)

def g8_f18(x):
    r= (x[2]-x[6])**2 + (x[3] -x[7])**2 - 1
    return max(r,0)

def g9_f18(x):
    r= x[6]**2 + (x[7] -x[8])**2 - 1
    return max(r,0)

def g10_f18(x):
    r= x[1]*x[2] -x[0]*x[3]
    return max(r,0)

def g11_f18(x):
    r= -x[2]*x[8]
    return max(r,0)

def g12_f18(x):
    r= x[4]*x[8]
    return max(r,0)

def g13_f18(x):
    r= x[5]*x[6]-x[4]*x[7]
    return max(r,0)

"--------------------"        
"G19" 
"--------------------"
# custom constraint -> f(x*) ==32.6555929502463
def g19(x):
    b=[-40,-2,-0.25,-4,-4,-1,-40,-60,5,1]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    r=0
    R=0
    for j in range(5):
        for i in range(5):
            r+=c[i][j]*x[10+i]*x[10+j]
    for j in range(5):
        R+=d[j]*x[10+j]**3
    R=2*R
    for i in range(10):
        r-=b[i]*x[i]
    return max(r+R,0)

def g1_f19(x):
    e=[-15, -27, -36, -18, -12]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    a=[[-16,2,0,1,0],[0,-2,0,0.4,2],[-3.5,0,2,0,0],[0,-2,0,-4,-1],[0,-9,-2,1,-2.8],[2,0,-4,0,0],[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[1,2,3,4,5],[1,1,1,1,1]]
    r=0
    for i in range(5):
        r+=-c[i][1]*x[10+i]
    r=2*r
    for i in range(5):
        r+=-3*d[1]*x[10+1]**2-e[1]   
    for i in range(10):
        r+=a[i][1]*x[i]
    return max(r,0)

def g2_f19(x):
    e=[-15, -27, -36, -18, -12]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    a=[[-16,2,0,1,0],[0,-2,0,0.4,2],[-3.5,0,2,0,0],[0,-2,0,-4,-1],[0,-9,-2,1,-2.8],[2,0,-4,0,0],[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[1,2,3,4,5],[1,1,1,1,1]]
    r= 0
    for i in range(5):
        r+=-c[i][2]*x[10+i]
    r=2*r
    for i in range(5):
        r+=-3*d[2]*x[10+2]**2-e[2]   
    for i in range(10):
        r+=a[i][2]*x[i]
    return max(r,0)

def g3_f19(x):
    e=[-15, -27, -36, -18, -12]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    a=[[-16,2,0,1,0],[0,-2,0,0.4,2],[-3.5,0,2,0,0],[0,-2,0,-4,-1],[0,-9,-2,1,-2.8],[2,0,-4,0,0],[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[1,2,3,4,5],[1,1,1,1,1]]
    r=0
    for i in range(5):
        r+=-c[i][2]*x[10+i]
    r=2*r
    for i in range(5):
        r+=-3*d[2]*x[10+2]**2-e[2]   
    for i in range(10):
        r+=a[i][2]*x[i]
    return max(r,0)

def g4_f19(x):
    e=[-15, -27, -36, -18, -12]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    a=[[-16,2,0,1,0],[0,-2,0,0.4,2],[-3.5,0,2,0,0],[0,-2,0,-4,-1],[0,-9,-2,1,-2.8],[2,0,-4,0,0],[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[1,2,3,4,5],[1,1,1,1,1]]
    r= x[0]**2 + (x[1] -x[8])**2 - 1
    r=0
    for i in range(5):
        r+=-c[i][3]*x[10+i]
    r=2*r
    for i in range(5):
        r+=-3*d[3]*x[10+3]**2-e[3]   
    for i in range(10):
        r+=a[i][3]*x[i]
    return max(r,0)

def g5_f19(x):
    e=[-15, -27, -36, -18, -12]
    c=[[30, -20, -10, 32, -10],[-20,39,-6,-31,32],[-10,-6,10,-6,-10],[32,-31,-6,39,-20],[-10,32,-10,-20,30]]
    d=[4,8,10,6,2]
    a=[[-16,2,0,1,0],[0,-2,0,0.4,2],[-3.5,0,2,0,0],[0,-2,0,-4,-1],[0,-9,-2,1,-2.8],[2,0,-4,0,0],[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[1,2,3,4,5],[1,1,1,1,1]]
    r=0
    for i in range(5):
        r+=-c[i][4]*x[10+i]
    r=2*r
    for i in range(5):
        r+=-3*d[4]*x[10+4]**2-e[4]   
    for i in range(10):
        r+=a[i][4]*x[i]
    return max(r,0)

"--------------------"        
"G20" 
"--------------------"
# custom constraint -> f(x*) ==32.6555929502463
def g20(x):
    a=[0.0693,0.0577,0.05,0.2,0.26,0.55,0.06,0.1,0.12,0.18,0.1,0.09,0.0693,0.0577,0.05,0.2,0.26,0.55,0.06,0.1,0.12,0.18,0.1,0.09]
    return np.sum(a[i]*x[i] for i in range(24))

def g1_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[0]+x[12])/(np.sum(x)+e[0])
    return max(r,0)

def g2_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[1]+x[13])/(np.sum(x)+e[1])
    return max(r,0)
    
def g3_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[2]+x[14])/(np.sum(x)+e[2])
    return max(r,0)

def g4_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[6]+x[18])/(np.sum(x)+e[3])
    return max(r,0)

def g5_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[7]+x[19])/(np.sum(x)+e[4])
    return max(r,0)

def g6_f20(x):
    e=[0.1,0.3,0.4,0.3,0.6,0.3]
    r=(x[8]+x[20])/(np.sum(x)+e[5])
    return max(r,0)

def h1_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[12]/b[12]*np.sum(x[j]/b[j] for i in range(12,24)) - c[0]*x[0]/40*b[0]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[13]/b[13]*np.sum(x[j]/b[j] for i in range(12,24)) - c[1]*x[1]/40*b[1]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[14]/b[14]*np.sum(x[j]/b[j] for i in range(12,24)) - c[2]*x[2]/40*b[2]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h4_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[15]/b[15]*np.sum(x[j]/b[j] for i in range(12,24)) - c[3]*x[3]/40*b[3]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h5_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[16]/b[16]*np.sum(x[j]/b[j] for i in range(12,24)) - c[4]*x[4]/40*b[4]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h6_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[17]/b[17]*np.sum(x[j]/b[j] for i in range(12,24)) - c[5]*x[5]/40*b[5]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h7_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[18]/b[18]*np.sum(x[j]/b[j] for i in range(12,24)) - c[6]*x[6]/40*b[6]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h8_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[19]/b[19]*np.sum(x[j]/b[j] for i in range(12,24)) - c[7]*x[7]/40*b[7]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h9_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[20]/b[20]*np.sum(x[j]/b[j] for i in range(12,24)) - c[8]*x[8]/40*b[8]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h10_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[21]/b[21]*np.sum(x[j]/b[j] for i in range(12,24)) - c[9]*x[9]/40*b[9]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h11_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[22]/b[22]*np.sum(x[j]/b[j] for i in range(12,24)) - c[10]*x[10]/40*b[10]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h12_f20(x):
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    c=[123.7,31.7,45.7,14.7,84.7,27.7,49.7,7.1,2.1,17.7,0.85,0.64]
    r= x[23]/b[23]*np.sum(x[j]/b[j] for i in range(12,24)) - c[11]*x[11]/40*b[11]*np.sum(x[j]/b[j] for i in range(12))
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h13_f20(x):
    r= np.sum(x)-1
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
    
def h14_f20(x):
    d=[31.244,36.12,34.784,92.7,82.7,91.6,56.708,82.7,80.8,64.517,49.4,49.1]
    b=[44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097,44.094,58.12,58.12,137.4,120.9,170.9,62.501,84.94,133.425,82.507,46.07,60.097]
    r= np.sum(x[i]/d[i] for i in range(12)) + (0.7302*530*14.7/40)*np.sum(x[i]/b[i] for i in range(12,24)) -1.671
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

"--------------------"        
"G21" 
"--------------------"
# custom constraint -> f(x*) ==193.724510070035
def g21(x):
    return x[0]

def g1_f21(x):
    r= -x[0] + 35*x[1]**0.6 + 35*x[2]**0.6
    return max(r,0)

def h1_f21(x):
    r= -300*x[2] + 7500*x[4] - 7500*x[5] - 25*x[3]*x[4] + 25*x[3]*x[5] + x[2]*x[3]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h2_f21(x):
    r= 100*x[1] + 155.365*x[3] + 2500*x[6] - x[1]*x[3] - 25*x[3]*x[6] - 15536.5
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f21(x):
    r= -x[4] + np.log(-x[3]+900)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h4_f21(x):
    r= -x[5] + np.log(x[3]+300)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h5_f21(x):
    r= -x[6] + np.log(-2*x[3]+700)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    

"--------------------"        
"G22" 
"--------------------"
# custom constraint -> f(x*) ==236.430975504001
def g22(x):
    return x[0]

def g1_f22(x):
    r= -x[0] + x[1]**0.6 + x[2]**0.6 + x[3]**0.6
    return max(r,0)

def h1_f22(x):
    r= x[4] - 100000*x[7] + 1*10**7
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f22(x):
    r= x[5] + 100000*x[7] - 100000*x[8]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f22(x):
    r= x[6] + 100000*x[8] - 5*10**7
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h4_f22(x):
    r= x[4] + 100000*x[9] - 3.3*10**7
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h5_f22(x):
    r= x[5] + 100000*x[10] - 4.4*10**7
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h6_f22(x):
    r= x[6]+ 100000*x[11] - 6.6*10**7
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h7_f22(x):
    r= x[4] - 120*x[1]*x[12]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h8_f22(x):
    r= x[4] - 80*x[2]*x[13]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h9_f22(x):
    r= x[6] - 40*x[3]*x[14]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h10_f22(x):
    r= x[7] - x[10] + x[15]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h11_f22(x):
    r= x[8] - x[11] + x[16]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h12_f22(x):
    r= -x[17] + np.log(x[9]-100)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h13_f22(x):
    r= -x[18] + np.log(-x[7]+300)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h14_f22(x):
    r= -x[19] + np.log(x[15])
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h15_f22(x):
    r= -x[20] + np.log(-x[8]+400)
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h16_f22(x):
    r= -x[21] + np.log(x[16])
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h17_f22(x):
    r= -x[7] - x[9] + x[12]*x[17] - x[12]*x[18] + 400
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h18_f22(x):
    r= x[7] - x[8] - x[10] + x[13]*x[19] - x[13]*x[20] + 400
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

def h19_f22(x):
    r= x[8] - x[11] - 4.60517*x[14] + x[14]*x[21] + 100
    if np.abs(r)>1e-12:
        return r
    else:
        return 0

"--------------------"        
"G22" 
"--------------------"
# custom constraint -> f(x*) ==− 400.055099999999584
def g23(x):
    return -9*x[4] - 15*x[7] + 6*x[0] + 16*x[1] + 10*( x[5] + x[6] )

def g1_f23(x):
    r=x[8]*x[2] + 0.02*x[5] - 0.025*x[4]
    return max(r,0)

def g2_f23(x):
    r=x[8]*x[3] + 0.02*x[6] - 0.015*x[7]
    return max(r,0)

def h1_f23(x):
    r= x[0] + x[1] - x[2] - x[3]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h2_f23(x):
    r= 0.03*x[0] + 0.01*x[1] - x[8]*( x[2] + x[3] )
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h3_f23(x):
    r= x[2] + x[5] - x[4]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    
def h4_f23(x):
    r= x[3] + x[6] - x[7]
    if np.abs(r)>1e-12:
        return r
    else:
        return 0
    


"--------------------"        
"G24" 
"--------------------"
# custom constraint -> f(x*) == -5.50801327159536

def g24(x):
    return -x[0]-x[1]

def g1_f24(x):
    r= -2*x[0]**4 + 8*x[0]**3 -8*x[0]**2 +x[1] -2
    return max(r,0)

def g2_f24(x):
    r= -4*x[0]**4 + 32*x[0]**3 -88*x[0]**2 +x[1] -36
    return max(r,0)



"---------------------------------------------------------------------------------------------------------------------------------------------------------"

"Parameter definitions and PSO Implementations"
                  
"---------------------------------------------------------------------------------------------------------------------------------------------------------"

con=[[g1_f1,g2_f1,g3_f1,g4_f1,g5_f1,g6_f1,g7_f1,g8_f1,g9_f1],[g1_f2,g2_f2],[False],[g1_f4,g2_f4,g3_f4,g4_f4,g5_f4,g6_f4],[g1_f5,g2_f5],[g1_f6,g2_f6],[g1_f7,g2_f7,g3_f7,g4_f7,g5_f7,g6_f7,g7_f7,g8_f7],[g1_f8,g2_f8],[g1_f9,g2_f9,g3_f9,g4_f9],[g1_f10,g2_f10,g3_f10,g4_f10,g5_f10,g6_f10],[False],[g1_f12],[False],[False],[False],[g1_f16,g2_f16,g3_f16,g4_f16,g5_f16,g6_f16,g7_f16,g8_f16,g9_f16,g10_f16,g11_f16,g12_f16,g13_f16,g4_f16,g15_f16,g16_f16,g17_f16,g18_f16,g19_f16,g20_f16,g21_f16,g22_f16,g23_f16,g24_f16,g25_f16,g26_f16,g27_f16,g28_f16,g29_f16,g30_f16,g31_f16,g32_f16,g33_f16,g34_f16,g35_f16,g36_f16,g37_f16,g38_f16],[False],[g1_f18,g2_f18,g3_f18,g4_f18,g5_f18,g6_f18,g7_f18,g8_f18,g9_f18,g10_f18,g11_f18,g12_f18,g13_f18,],[g1_f19,g2_f19,g3_f19,g4_f19,g5_f19],[g1_f20,g2_f20,g3_f20,g4_f20,g5_f20,g6_f20,],[g1_f21],[g1_f22],[g1_f23,g2_f23],[g1_f24,g2_f24]]
coneq=[[False],[False],[h1_f3],[False],[h1_f5,h2_f5,h3_f5],[False],[False],[False],[False],[False],[h1_f11],[False],[h1_f13,h2_f13,h3_f13],[h1_f14,h2_f14,h3_f14],[h1_f15,h2_f15],[False],[h1_f17,h2_f17,h3_f17,h4_f17],[False],[False],[h1_f20,h2_f20,h3_f20,h4_f20,h5_f20,h6_f20,h7_f20,h8_f20,h9_f20,h10_f20,h11_f20,h12_f20,h13_f20,h14_f20],[h1_f21,h2_f21,h3_f21,h4_f21,h5_f21],[h1_f22,h2_f22,h3_f22,h4_f22,h5_f22,h6_f22,h7_f22,h8_f22,h9_f22,h10_f22,h11_f22,h12_f22,h13_f22,h14_f22,h15_f22,h16_f22,h17_f22,h18_f22,h19_f22],[h1_f23,h2_f23,h3_f23,h4_f23],[False]]
con_mins=[-15,-0.80361910412559,-1.00050010001000,-30665.53867178332, 5126.4967140071, -6961.81387558015,24.30620906818,-0.0958250414180359,680.630057374402,7049.24802052867,0.7499,-1,0.053941514041898,-47.7648884594915,961.715022289961,-1.90515525853479,8853.53,- 0.866025403784439,32.6555929502463,0,193.724510070035,236.430975504001,-400.055099999999584,-5.50801327159536]

ubranges =[[[1]*9,[100]*3,[1]],[[10]*20],[[1]*10],[[102],[45]*4],[[1200,1200,0.55,0.55]],[[100]*2],[[10]*10],[[10]*2],[[10]*7],[[10000]*3,[1000]*5],[[1]*2],[[10**6]*3],[[2.3]*2,[3.2]*3],[[10]*10],[[10]*3],[[906.3855,288.88,134.75,287.0966,841988]],[[400,1000,420,420,1000,0.5236]],[[10]*8,[20]],[[10]*15],[[10]*24],[[1000,40,40,300,6.7,6.4,6.25]],[[20000],[10**6]*3,[40**7]*3,[290.99,399.99,300,400,600],[500]*3,[300,400],[6.25]*5],[[300]*3,[100]*3,[200]*2,[0.03]],[[3,4]]]
lbranges=[[[0]*13],[[0]*20],[[0]*10],[[78,33],[27]*3],[[0,0,-0.55,-0.55]],[[13,0]],[[-10]*10],[[0]*2],[[-10]*7],[[100,1000,1000],[10]*5],[[-1]*2],[[0]*3],[[-2.3]*2,[-3.2]*3],[[0]*10],[[0]*3],[[704.4148,68.6,0,193,25]],[[0,0,340,340,-1000,0]],[[-10]*8,[0]],[[0]*15],[[0]*24],[[0]*3,[100,6.3,5.9,4.5]],[[0]*7,[100,100,100.01,100,100],[0]*3,[0.01,0.01],[-4.7]*5],[[0]*8,[0.01]],[[0]*2]]


problems=[g01,g02,g03,g04,g05,g06,g07,g08,g09,g10,g11,g12,g13,g14,g15,g16,g17,g18,g19,g20,g21,g22,g23,g24]

"---------------------------------------------------------------------------------------------------------------------------------------------------------"

"Stat table setup"
                  
"---------------------------------------------------------------------------------------------------------------------------------------------------------"

lvls=("Best","Median","Worst","c","v","Mean","Std")
keys=(["5x10^3"])
indexs=['g01','g02','g03','g04','g05','g06','g07','g08','g09','g10','g11','g12','g13','g14','g15','g16','g17','g18','g19','g20','g21','g22','g23','g24']
funcs = [Deb_USP] 

arrays=[np.array(["5x10^3"]),np.array(lvls)]
tuples = list(zip(*arrays))
index = pd.MultiIndex.from_tuples(tuples, names=['Functions', 'Statistics'])
# Results = pd.DataFrame(index=indexs, columns=index)

Results = pd.DataFrame(index=indexs, columns=lvls)


"---------------------------------------------------------------------------------------------------------------------------------------------------------"

"Runtime"
                  
"---------------------------------------------------------------------------------------------------------------------------------------------------------"

Struct=np.zeros((25,6),dtype=object)
#

for j in range(len(indexs)):
    prob=(Problem(problems[j],lbranges[j],ubranges[j],cons=con[j],cons_eq=coneq[j])) 
    for i in range(25):
        Struct[i,0],Struct[i,1],Struct[i,2],Struct[i,3],Struct[i,4],Struct[i,5]=funcs[0](prob,swarmsize=40)
        print("{:} {:}% complete".format(indexs[j],((i+1)/25)*100))
    
    fease_list=[]
    val_list=[]
    for k in range(len(Struct[:,1])):
        val_list.append(Struct[k,0])
        if Struct[k,1]==0:
            fease_list.append(Struct[k,0])
    if np.size(fease_list==0):
        Results.loc[indexs[j],lvls[0]]="{:}".format(np.min(val_list))
    else:
        Results.loc[indexs[j],lvls[0]]="{:}".format(np.min(fease_list))
    idx = val_list.index(np.percentile(val_list,50,interpolation='nearest'))

    Results.loc[indexs[j],lvls[1]]="{:}".format(statistics.median(val_list)) 
    Results.loc[indexs[j],lvls[2]]="{:}".format(np.max(val_list)) 
    Results.loc[indexs[j],lvls[3]]="{:}".format(Struct[idx,4])
    Results.loc[indexs[j],lvls[4]]="{:}".format(Struct[idx,5]) 
    Results.loc[indexs[j],lvls[5]]="{:}".format(statistics.mean(val_list)) 
    Results.loc[indexs[j],lvls[6]]="{:}".format(statistics.stdev(val_list)) 

    
    # Results.loc[indexs[j],(keys[k],lvls[1])]= "{:}".format(Struct[:,0][np.argmin((Struct[:,0]-con_mins[j])**2)])
    # Results.loc[indexs[j],(keys[k],lvls[2])]= "{:}".format(Struct[:,0][np.argmax((Struct[:,0]-con_mins[j])**2)])
    # Results.loc[indexs[j],(keys[k],lvls[3])]= "{:}".format(sum(Struct[:,3])/len(Struct[:,3])*100)
    # Results.loc[indexs[j],(keys[k],lvls[5])]= "{:}".format(sum(Struct[:,4])/len(Struct[:,4]))
    # Temp=(Struct[:,0]-con_mins[j])**2
    # for t in range(len(Temp)):
    #     if Temp[t]!=0:
    #         Temp[t]=np.sqrt(Temp[t])
    #         if Temp[t]>1e-4:
    #             Temp[t]=0
    #         else:
    #             Temp[t]=1
    #     else:
    #         Temp[t]=1
    # Results.loc[indexs[j],(keys[k],lvls[4])]= "{:}".format(sum(Temp)/len(Temp)*100)

        # Results.loc[indexs[j],(keys[k],lvls[4])]=statistics.mean(Struct[:,1])
        # Results.loc[indexs[j],(keys[k],lvls[5])]=statistics.mean(Struct[:,2])
        # Results.loc[indexs[j],(keys[k],'Min')]= "{:.2e}".format(np.min(Struct[:,0]))
        # if np.sum(Struct[:,3])!=0:
        #           rows = [i for i in range(len(Struct[:,0])) if Struct[i,3]==1]
        #           fmin=np.min(itemgetter(*rows)(Struct[:,0]))
        #           Results.loc[indexs[j],(keys[k],'f_Min')]= "{:.2e}".format(fmin)
        #           if (fmin-con_mins[j])**2!=0:
        #               dist =np.sqrt((fmin-con_mins[j])**2)
        #           else:
        #               dist=0
        #           Results.loc[indexs[j],(keys[k],'Dist')]= "{:.10e}".format(dist)
        # else:
            # Results.loc[indexs[j],(keys[k],'f_Min')]='no feasible soln'
        # if (np.min(Struct[:,0])-con_mins[j])**2!=0:
        #     dist =np.sqrt((np.min(Struct[:,0])-con_mins[j])**2)
        # else:
        #     dist=0
        # Results.loc[indexs[j],(keys[k],'Dist')]= "{:.10e}".format(dist)


# results=pd.DataFrame(index=indexs,columns=['best dist'])

# count={"DED":0,"DEDg":0,"Deb_ED":0,"Deb_USP":0}
# count_keys=["DED","DEDg","Deb_ED","Deb_USP"]                                                   
# for i in range(len(indexs)):
#     r=[float(e) for e in Results.loc[indexs[i]]]    
#     J=[i for i, x in enumerate(r) if x == min(r)]
#     for j in J:
#         count[count_keys[j]]+=1